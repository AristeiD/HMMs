import hmms
import pytest
import numpy
import scipy.linalg

from common import *

@pytest.fixture
def cthmm():
    """Parameters for cthmm of 3 hidden states and 3  output variables"""
    Q = numpy.array( [[-0.375,0.125,0.25],[0.25,-0.5,0.25],[0.25,0.125,-0.375]] )
    B = numpy.array( [[0.8,0.05,0.15],[0.05,0.9,0.05],[0.2,0.05,0.75]] )
    Pi = numpy.array( [0.6,0,0.4] )
    return hmms.CtHMM(Q,B,Pi)

@pytest.fixture
def dthmm( cthmm ):
    """The discrete model, created so it behaves identical to the given continuous."""
    return hmms.DtHMM( *get_dthmm_params(cthmm) )


def test_compare_state_probs_with_discrete( dthmm ):
    """Test will run algorithms for counting state probability, determinically with the same initialization for both models"""
    t, e = create_data( dthmm, (1,100) )

    ct = hmms.CtHMM.random(3,3)
    dt = hmms.DtHMM( *get_dthmm_params(ct) )

    assert compare_parameters_no_sort( dt,  hmms.DtHMM( *get_dthmm_params(ct) ) )

    row = e[0]
    trow = t[0]

    #ct
    alpha = ct.forward ( trow, row )
    beta =  ct.backward( trow, row )
    gamma = ct.single_state_prob( alpha, beta )
    ksi = ct.double_state_prob( alpha, beta, trow, row )
    #dt
    d_alpha = dt.forward ( row )
    d_beta =  dt.backward( row )
    d_gamma = dt.single_state_prob( d_alpha, d_beta )
    d_ksi = dt.double_state_prob( d_alpha, d_beta, row )

    assert float_equal_mat( gamma, d_gamma  )
    assert float_equal_mat( ksi[0], d_ksi  )

@pytest.mark.parametrize("t,e,num", [
    (numpy.array([ [0,5,8,9,14,19],[0,3,6,7,12,13],[0,5,6,11,14,19] ]),
     numpy.array([ [0,0,1,0,1,0],[0,1,2,0,1,0],[2,2,0,1,0,2] ]),
     3
    ),
    (numpy.array([ [0,1,8,16,19,29],[0,2,60,77,120,133],[0,50,61,70,77,79] ]),
     numpy.array([ [0,0,1,0,1,0],[0,1,2,0,1,0],[2,2,0,1,0,2] ]),
     13
    ),
    (numpy.array([ [0,1,8,16,19,29],[0,2,60,77,120,133],[0,50,61,70,77,79] ]),
     numpy.array([ [0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0] ]),
     13
    ),
    (numpy.array([ [0,1,8,16,19,29],[0,2,60,77,120,133],[0,50,61,70,77,79] ]),
     numpy.array([ [1,1,1,1,1,0],[1,1,0,0,0,0],[1,1,0,0,0,0] ]),   #impossibility of init model
     13
    )

])
def test_time_intervals_mapping( t,e,num, cthmm ):
    """test if the time intervals compress to uniq intervals correctly.
    Training data of various time intervals.
    Data are created in the way so it encompass zero probability -> -inf logprobability.
    """
    cthmm.baum_welch( t, e , 3)

    assert cthmm.time_n == num

@pytest.fixture
def train_data():
    data = ( numpy.array([ [ 0,  1,  2,  3,  6,  8, 13, 14, 15, 16],
                           [ 0,  1,  2,  3,  5,  8, 10, 14, 17, 20],
                           [ 0,  6,  9, 14, 17, 21, 22, 25, 29, 30],
                           [ 0,  1,  2,  5,  8, 10, 11, 14, 16, 17],
                           [ 0,  1,  3,  5,  7,  9, 12, 15, 16, 22 ] ] ),
             numpy.array([ [0, 0, 0, 0, 2, 1, 1, 1, 2, 0],
                           [0, 0, 0, 1, 0, 0, 0, 0, 0, 2],
                           [0, 0, 1, 0, 2, 0, 0, 2, 2, 2],
                           [0, 0, 0, 2, 1, 2, 2, 2, 2, 0],
                           [2, 0, 0, 2, 0, 2, 2, 0, 0, 0] ] )
           )
    return data

@pytest.fixture
def out_params():
    """Parameters obtained from cthmm after train at """
    Q = numpy.array( [[-0.343587,0.104953,0.238635],
	                  [0.242387,-0.520299,0.277912],
                      [0.243836,0.120222,-0.364058]] )
    B = numpy.array( [[0.800786,0.039352,0.159862],
                      [0.056306,0.925069,0.018625],
                      [0.177688,0.059007,0.763306]] )
    Pi = numpy.array( [0.893435,0.000000,0.106565] )
    return hmms.CtHMM(Q,B,Pi)


#TODO parametricky test nato ci klesa estimation v baumwelchu


def test_baum_welch( train_data, cthmm, out_params ):
    """This is just the consistency test, do not ensure right computations"""
    t,e = train_data


    print("estimation:",cthmm.data_estimate(t,e) )

    print(t)
    print(e)

    cthmm.baum_welch( t,e,20 )

    print(cthmm.q)

    print("estimation:",cthmm.data_estimate(t,e) )

    assert compare_parameters_no_sort( out_params,  cthmm )




def get_dthmm_params( cthmm ):
    """given the cthmm get parameters for dthmm"""
    A = scipy.linalg.expm( cthmm.q )  #the transition rate is set as the one time unit probabilities of continuos model
    B = cthmm.b
    Pi = cthmm.pi
    return (A,B,Pi)


def create_data( dthmm, size ):
    """Create output variables and time sequences generated by dthmm
       size = ( number of sequences, length of sequences  )
    """

    e = numpy.empty( size, dtype=int )
    t = numpy.empty( size, dtype=int )

    for i in range( size[0] ):
        e[i] = dthmm.generate( size[1] )[1]
        t[i] = numpy.arange(  size[1] )

    return (t,e)

#TODO pridaj ako test na prepare matrices
#    def zmaz_ma( self, times ):
#        self._prepare_matrices_pt( numpy.array( [times] ) )
#        for i in range ( 1, times.shape[0] ):
#            interval = times[i] - times[i-1]
#            print("i:",interval)
#            print( numpy.asarray( self._pt[ self.tmap[ interval ] ]  ) )
#
#        self._prepare_matrices_n_exp()
